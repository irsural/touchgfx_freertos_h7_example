/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#ifndef ITEMSLISTCONTAINERBASE_HPP
#define ITEMSLISTCONTAINERBASE_HPP

#include <gui/common/FrontendApplication.hpp>
#include <touchgfx/containers/Container.hpp>
#include <touchgfx/widgets/TiledImage.hpp>
#include <touchgfx/containers/ScrollableContainer.hpp>
#include <touchgfx/containers/ListLayout.hpp>

class ItemsListContainerBase : public touchgfx::Container
{
public:
    ItemsListContainerBase();
    virtual ~ItemsListContainerBase() {}
    virtual void initialize();

    /*
     * Custom Trigger Callback Setters
     */
    void setItemChoosenCallback(touchgfx::GenericCallback<const std::vector<touchgfx::Unicode::UnicodeChar>&>& callback)
    {
        this->ItemChoosenCallback = &callback;
    }

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
    }

    /*
     * Custom Trigger Emitters
     */
    virtual void emitItemChoosenCallback(const std::vector<touchgfx::Unicode::UnicodeChar>& value)
    {
        if (ItemChoosenCallback && ItemChoosenCallback->isValid())
        {
            this->ItemChoosenCallback->execute(value);
        }
    }

    /*
     * Member Declarations
     */
    touchgfx::TiledImage tiledImage1;
    touchgfx::ScrollableContainer scroll_area;
    touchgfx::ListLayout list_layout;

private:

    /*
     * Custom Trigger Callback Declarations
     */
    touchgfx::GenericCallback<const std::vector<touchgfx::Unicode::UnicodeChar>&>* ItemChoosenCallback;

};

#endif // ITEMSLISTCONTAINERBASE_HPP
